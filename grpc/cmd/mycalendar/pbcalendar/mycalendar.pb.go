// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mycalendar.proto

package pbcalendar

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Count struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{1}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Date struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Month                int32    `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"`
	Day                  int32    `protobuf:"varint,3,opt,name=Day,proto3" json:"Day,omitempty"`
	Hour                 int32    `protobuf:"varint,4,opt,name=Hour,proto3" json:"Hour,omitempty"`
	Minute               int32    `protobuf:"varint,5,opt,name=Minute,proto3" json:"Minute,omitempty"`
	Second               int32    `protobuf:"varint,6,opt,name=Second,proto3" json:"Second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{2}
}

func (m *Date) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Date.Unmarshal(m, b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Date.Marshal(b, m, deterministic)
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return xxx_messageInfo_Date.Size(m)
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *Date) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *Date) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *Date) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

type Event struct {
	Alerttime            *Date    `protobuf:"bytes,1,opt,name=alerttime,proto3" json:"alerttime,omitempty"`
	Information          string   `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetAlerttime() *Date {
	if m != nil {
		return m.Alerttime
	}
	return nil
}

func (m *Event) GetInformation() string {
	if m != nil {
		return m.Information
	}
	return ""
}

type MoveEvent struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Newdate              *Date    `protobuf:"bytes,2,opt,name=newdate,proto3" json:"newdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveEvent) Reset()         { *m = MoveEvent{} }
func (m *MoveEvent) String() string { return proto.CompactTextString(m) }
func (*MoveEvent) ProtoMessage()    {}
func (*MoveEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{4}
}

func (m *MoveEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveEvent.Unmarshal(m, b)
}
func (m *MoveEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveEvent.Marshal(b, m, deterministic)
}
func (m *MoveEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveEvent.Merge(m, src)
}
func (m *MoveEvent) XXX_Size() int {
	return xxx_messageInfo_MoveEvent.Size(m)
}
func (m *MoveEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MoveEvent proto.InternalMessageInfo

func (m *MoveEvent) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *MoveEvent) GetNewdate() *Date {
	if m != nil {
		return m.Newdate
	}
	return nil
}

type EventsForDay struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Month                int32    `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"`
	Day                  int32    `protobuf:"varint,3,opt,name=Day,proto3" json:"Day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsForDay) Reset()         { *m = EventsForDay{} }
func (m *EventsForDay) String() string { return proto.CompactTextString(m) }
func (*EventsForDay) ProtoMessage()    {}
func (*EventsForDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{5}
}

func (m *EventsForDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsForDay.Unmarshal(m, b)
}
func (m *EventsForDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsForDay.Marshal(b, m, deterministic)
}
func (m *EventsForDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsForDay.Merge(m, src)
}
func (m *EventsForDay) XXX_Size() int {
	return xxx_messageInfo_EventsForDay.Size(m)
}
func (m *EventsForDay) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsForDay.DiscardUnknown(m)
}

var xxx_messageInfo_EventsForDay proto.InternalMessageInfo

func (m *EventsForDay) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EventsForDay) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *EventsForDay) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type EventsForWeek struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Week                 int32    `protobuf:"varint,2,opt,name=Week,proto3" json:"Week,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsForWeek) Reset()         { *m = EventsForWeek{} }
func (m *EventsForWeek) String() string { return proto.CompactTextString(m) }
func (*EventsForWeek) ProtoMessage()    {}
func (*EventsForWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{6}
}

func (m *EventsForWeek) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsForWeek.Unmarshal(m, b)
}
func (m *EventsForWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsForWeek.Marshal(b, m, deterministic)
}
func (m *EventsForWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsForWeek.Merge(m, src)
}
func (m *EventsForWeek) XXX_Size() int {
	return xxx_messageInfo_EventsForWeek.Size(m)
}
func (m *EventsForWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsForWeek.DiscardUnknown(m)
}

var xxx_messageInfo_EventsForWeek proto.InternalMessageInfo

func (m *EventsForWeek) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EventsForWeek) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

type EventsForMonth struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Month                int32    `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsForMonth) Reset()         { *m = EventsForMonth{} }
func (m *EventsForMonth) String() string { return proto.CompactTextString(m) }
func (*EventsForMonth) ProtoMessage()    {}
func (*EventsForMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a09cb90c53a1eb3, []int{7}
}

func (m *EventsForMonth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsForMonth.Unmarshal(m, b)
}
func (m *EventsForMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsForMonth.Marshal(b, m, deterministic)
}
func (m *EventsForMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsForMonth.Merge(m, src)
}
func (m *EventsForMonth) XXX_Size() int {
	return xxx_messageInfo_EventsForMonth.Size(m)
}
func (m *EventsForMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsForMonth.DiscardUnknown(m)
}

var xxx_messageInfo_EventsForMonth proto.InternalMessageInfo

func (m *EventsForMonth) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EventsForMonth) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func init() {
	proto.RegisterType((*Result)(nil), "pbcalendar.Result")
	proto.RegisterType((*Count)(nil), "pbcalendar.Count")
	proto.RegisterType((*Date)(nil), "pbcalendar.Date")
	proto.RegisterType((*Event)(nil), "pbcalendar.Event")
	proto.RegisterType((*MoveEvent)(nil), "pbcalendar.MoveEvent")
	proto.RegisterType((*EventsForDay)(nil), "pbcalendar.EventsForDay")
	proto.RegisterType((*EventsForWeek)(nil), "pbcalendar.EventsForWeek")
	proto.RegisterType((*EventsForMonth)(nil), "pbcalendar.EventsForMonth")
}

func init() { proto.RegisterFile("mycalendar.proto", fileDescriptor_9a09cb90c53a1eb3) }

var fileDescriptor_9a09cb90c53a1eb3 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0xeb, 0xd3, 0x40,
	0x10, 0xa5, 0xbf, 0x26, 0x91, 0x4c, 0xda, 0x52, 0x17, 0x95, 0x58, 0x10, 0xca, 0x5e, 0x14, 0x0f,
	0x39, 0xd4, 0xa2, 0xa0, 0x88, 0x87, 0x56, 0x11, 0x21, 0x97, 0x78, 0x90, 0xde, 0xdc, 0x26, 0x23,
	0x06, 0x93, 0xdd, 0xb2, 0xd9, 0x54, 0xfa, 0x05, 0xfc, 0xb6, 0x7e, 0x07, 0xd9, 0x3f, 0x4d, 0x53,
	0x9a, 0x83, 0x7a, 0x9b, 0x79, 0x6f, 0xde, 0xcb, 0xdb, 0xd9, 0x2c, 0xcc, 0xeb, 0x53, 0xce, 0x2a,
	0xe4, 0x05, 0x93, 0xc9, 0x41, 0x0a, 0x25, 0x08, 0x1c, 0xf6, 0x67, 0x84, 0x2e, 0x21, 0xc8, 0xb0,
	0x69, 0x2b, 0x45, 0x1e, 0x41, 0xd0, 0x28, 0xa6, 0xda, 0x26, 0x1e, 0x2d, 0x47, 0xcf, 0xc2, 0xcc,
	0x75, 0xf4, 0x09, 0xf8, 0x1b, 0xd1, 0x72, 0x45, 0x1e, 0x80, 0x9f, 0xeb, 0xc2, 0xf0, 0x7e, 0x66,
	0x1b, 0xfa, 0x6b, 0x04, 0xde, 0x96, 0x29, 0x24, 0x04, 0xbc, 0x1d, 0x32, 0xe9, 0x58, 0x53, 0x6b,
	0x49, 0x2a, 0xb8, 0xfa, 0x1e, 0xdf, 0x59, 0x89, 0x69, 0xc8, 0x1c, 0xc6, 0x5b, 0x76, 0x8a, 0xc7,
	0x06, 0xd3, 0xa5, 0xd6, 0x7e, 0x14, 0xad, 0x8c, 0x3d, 0xab, 0xd5, 0xb5, 0xce, 0x93, 0x96, 0xbc,
	0x55, 0x18, 0xfb, 0x06, 0x75, 0x9d, 0xc6, 0x3f, 0x63, 0x2e, 0x78, 0x11, 0x07, 0x16, 0xb7, 0x1d,
	0xdd, 0x81, 0xff, 0xfe, 0x88, 0x5c, 0x91, 0x04, 0x42, 0x56, 0xa1, 0x54, 0xaa, 0xac, 0xd1, 0xa4,
	0x89, 0x56, 0xf3, 0xe4, 0x72, 0xe4, 0x44, 0xa7, 0xcd, 0x2e, 0x23, 0x64, 0x09, 0x51, 0xc9, 0xbf,
	0x09, 0x59, 0x33, 0x55, 0x0a, 0x6e, 0xa2, 0x86, 0x59, 0x1f, 0xa2, 0x5f, 0x21, 0x4c, 0xc5, 0x11,
	0xad, 0xfd, 0x53, 0xf0, 0x51, 0x17, 0xce, 0xfa, 0x7e, 0xdf, 0xda, 0x4c, 0x64, 0x96, 0x27, 0xcf,
	0xe1, 0x1e, 0xc7, 0x9f, 0x05, 0x53, 0x68, 0x3c, 0x87, 0x52, 0x9c, 0x07, 0xe8, 0x27, 0x98, 0x18,
	0x6d, 0xf3, 0x41, 0x48, 0xb7, 0x90, 0xff, 0x5d, 0x26, 0x7d, 0x05, 0xd3, 0xce, 0xeb, 0x0b, 0xe2,
	0x8f, 0x41, 0x33, 0x02, 0x9e, 0xe6, 0x9c, 0x97, 0xa9, 0xe9, 0x6b, 0x98, 0x75, 0x42, 0x6b, 0xfe,
	0xd7, 0x31, 0x56, 0xbf, 0xef, 0x00, 0xd2, 0xd3, 0xc6, 0x9d, 0x8e, 0xac, 0x21, 0xca, 0x25, 0x32,
	0xe5, 0x76, 0x76, 0xbb, 0xa4, 0x05, 0xe9, 0x43, 0xee, 0x17, 0x5c, 0x43, 0x54, 0x60, 0x85, 0xff,
	0xa8, 0x7a, 0x09, 0x61, 0xdd, 0xdd, 0xce, 0xc3, 0xfe, 0x40, 0x77, 0x69, 0x83, 0xba, 0x37, 0x30,
	0xc1, 0xfe, 0xce, 0xe3, 0x9b, 0xcf, 0x39, 0x66, 0x71, 0x15, 0xc4, 0x3e, 0x86, 0x77, 0x30, 0xc3,
	0xeb, 0x5d, 0x2d, 0x06, 0xe5, 0x86, 0x1b, 0x32, 0x78, 0x0b, 0x53, 0xbc, 0xba, 0xa5, 0xc7, 0x83,
	0x7a, 0x4d, 0x0d, 0xc8, 0xf7, 0x81, 0x79, 0xca, 0x2f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x90,
	0x34, 0x50, 0xcc, 0xde, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyCalendarClient is the client API for MyCalendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyCalendarClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Result, error)
	DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Result, error)
	MoveEvent(ctx context.Context, in *MoveEvent, opts ...grpc.CallOption) (*Result, error)
	EventsForDay(ctx context.Context, in *EventsForDay, opts ...grpc.CallOption) (*Count, error)
	EventsForMonth(ctx context.Context, in *EventsForMonth, opts ...grpc.CallOption) (*Count, error)
	EventsForWeek(ctx context.Context, in *EventsForWeek, opts ...grpc.CallOption) (*Count, error)
}

type myCalendarClient struct {
	cc *grpc.ClientConn
}

func NewMyCalendarClient(cc *grpc.ClientConn) MyCalendarClient {
	return &myCalendarClient{cc}
}

func (c *myCalendarClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/createEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCalendarClient) DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/deleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCalendarClient) MoveEvent(ctx context.Context, in *MoveEvent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/moveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCalendarClient) EventsForDay(ctx context.Context, in *EventsForDay, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/eventsForDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCalendarClient) EventsForMonth(ctx context.Context, in *EventsForMonth, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/eventsForMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myCalendarClient) EventsForWeek(ctx context.Context, in *EventsForWeek, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/pbcalendar.MyCalendar/eventsForWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyCalendarServer is the server API for MyCalendar service.
type MyCalendarServer interface {
	CreateEvent(context.Context, *Event) (*Result, error)
	DeleteEvent(context.Context, *Event) (*Result, error)
	MoveEvent(context.Context, *MoveEvent) (*Result, error)
	EventsForDay(context.Context, *EventsForDay) (*Count, error)
	EventsForMonth(context.Context, *EventsForMonth) (*Count, error)
	EventsForWeek(context.Context, *EventsForWeek) (*Count, error)
}

// UnimplementedMyCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedMyCalendarServer struct {
}

func (*UnimplementedMyCalendarServer) CreateEvent(ctx context.Context, req *Event) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedMyCalendarServer) DeleteEvent(ctx context.Context, req *Event) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedMyCalendarServer) MoveEvent(ctx context.Context, req *MoveEvent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEvent not implemented")
}
func (*UnimplementedMyCalendarServer) EventsForDay(ctx context.Context, req *EventsForDay) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventsForDay not implemented")
}
func (*UnimplementedMyCalendarServer) EventsForMonth(ctx context.Context, req *EventsForMonth) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventsForMonth not implemented")
}
func (*UnimplementedMyCalendarServer) EventsForWeek(ctx context.Context, req *EventsForWeek) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventsForWeek not implemented")
}

func RegisterMyCalendarServer(s *grpc.Server, srv MyCalendarServer) {
	s.RegisterService(&_MyCalendar_serviceDesc, srv)
}

func _MyCalendar_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyCalendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).DeleteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyCalendar_MoveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).MoveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/MoveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).MoveEvent(ctx, req.(*MoveEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyCalendar_EventsForDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsForDay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).EventsForDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/EventsForDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).EventsForDay(ctx, req.(*EventsForDay))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyCalendar_EventsForMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsForMonth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).EventsForMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/EventsForMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).EventsForMonth(ctx, req.(*EventsForMonth))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyCalendar_EventsForWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsForWeek)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyCalendarServer).EventsForWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbcalendar.MyCalendar/EventsForWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyCalendarServer).EventsForWeek(ctx, req.(*EventsForWeek))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyCalendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbcalendar.MyCalendar",
	HandlerType: (*MyCalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createEvent",
			Handler:    _MyCalendar_CreateEvent_Handler,
		},
		{
			MethodName: "deleteEvent",
			Handler:    _MyCalendar_DeleteEvent_Handler,
		},
		{
			MethodName: "moveEvent",
			Handler:    _MyCalendar_MoveEvent_Handler,
		},
		{
			MethodName: "eventsForDay",
			Handler:    _MyCalendar_EventsForDay_Handler,
		},
		{
			MethodName: "eventsForMonth",
			Handler:    _MyCalendar_EventsForMonth_Handler,
		},
		{
			MethodName: "eventsForWeek",
			Handler:    _MyCalendar_EventsForWeek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycalendar.proto",
}
